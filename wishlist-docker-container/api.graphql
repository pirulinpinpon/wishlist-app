### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneProduct(data: ProductCreateInput!): Product!
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Product {
  createdAt: DateTime!
  id: String!
  images: [String!]!
  merchant: String
  title: String
  updatedAt: DateTime!
  url: String
}

input ProductCreateimagesInput {
  set: [String!]
}

input ProductCreateInput {
  createdAt: DateTime
  id: String
  images: ProductCreateimagesInput
  merchant: String
  purchases: PurchaseCreateManyWithoutProductInput
  title: String
  updatedAt: DateTime
  url: String
}

input ProductOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  images: SortOrder
  merchant: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ProductUpdateimagesInput {
  set: [String!]
}

input ProductUpdateInput {
  createdAt: DateTime
  id: String
  images: ProductUpdateimagesInput
  merchant: String
  purchases: PurchaseUpdateManyWithoutProductInput
  title: String
  updatedAt: DateTime
  url: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  merchant: NullableStringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  purchases: PurchaseFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  url: NullableStringFilter
}

input ProductWhereUniqueInput {
  id: String
}

input PurchaseCreateManyWithoutProductInput {
  connect: [PurchaseWhereUniqueInput!]
  create: [PurchaseCreateWithoutProductInput!]
}

input PurchaseCreateWithoutProductInput {
  createdAt: DateTime
  id: String
  price: Float!
  updatedAt: DateTime
}

input PurchaseFilter {
  every: PurchaseWhereInput
  none: PurchaseWhereInput
  some: PurchaseWhereInput
}

input PurchaseScalarWhereInput {
  AND: [PurchaseScalarWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [PurchaseScalarWhereInput!]
  OR: [PurchaseScalarWhereInput!]
  price: FloatFilter
  productId: NullableStringFilter
  updatedAt: DateTimeFilter
}

input PurchaseUpdateManyDataInput {
  createdAt: DateTime
  id: String
  price: Float
  updatedAt: DateTime
}

input PurchaseUpdateManyWithoutProductInput {
  connect: [PurchaseWhereUniqueInput!]
  create: [PurchaseCreateWithoutProductInput!]
  delete: [PurchaseWhereUniqueInput!]
  deleteMany: [PurchaseScalarWhereInput!]
  disconnect: [PurchaseWhereUniqueInput!]
  set: [PurchaseWhereUniqueInput!]
  update: [PurchaseUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [PurchaseUpdateManyWithWhereNestedInput!]
  upsert: [PurchaseUpsertWithWhereUniqueWithoutProductInput!]
}

input PurchaseUpdateManyWithWhereNestedInput {
  data: PurchaseUpdateManyDataInput!
  where: PurchaseScalarWhereInput!
}

input PurchaseUpdateWithoutProductDataInput {
  createdAt: DateTime
  id: String
  price: Float
  updatedAt: DateTime
}

input PurchaseUpdateWithWhereUniqueWithoutProductInput {
  data: PurchaseUpdateWithoutProductDataInput!
  where: PurchaseWhereUniqueInput!
}

input PurchaseUpsertWithWhereUniqueWithoutProductInput {
  create: PurchaseCreateWithoutProductInput!
  update: PurchaseUpdateWithoutProductDataInput!
  where: PurchaseWhereUniqueInput!
}

input PurchaseWhereInput {
  AND: [PurchaseWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [PurchaseWhereInput!]
  OR: [PurchaseWhereInput!]
  price: FloatFilter
  product: ProductWhereInput
  productId: NullableStringFilter
  updatedAt: DateTimeFilter
}

input PurchaseWhereUniqueInput {
  id: String
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

enum SortOrder {
  asc
  desc
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
